import time
import os
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains

# --- Configura√ß√µes Globais ---
USER_DATA_DIR = r"C:\Users\joao.ferri\AppData\Local\Google\Chrome\User Data"
PROFILE_DIR = "Default"
PJE_URL = "https://pje.tjes.jus.br/pje/Painel/painel_usuario/advogado.seam"

# --- IMPORTANTE: Caminho para o driver manual ---
# Coloque o caminho completo para o chromedriver.exe que voc√™ baixou.
# O 'r' antes da string √© importante para lidar com as barras invertidas do Windows.
# DICA: Crie uma pasta 'drivers' dentro do seu projeto e coloque o .exe l√°.
CAMINHO_DRIVER = r"C:\Users\joao.ferri\Desktop\PJ_ES_AUTOMA√á√ÉO\drivers\chromedriver.exe"

def iniciar_navegador():
    """
    Inicia o Chrome usando um chromedriver.exe local (modo offline).
    """
    print("üöÄ Iniciando navegador com driver manual (modo offline)...")
    
    # Valida√ß√£o para garantir que o arquivo do driver existe antes de continuar
    if not os.path.exists(CAMINHO_DRIVER):
        print(f"üí• ERRO: O arquivo do ChromeDriver n√£o foi encontrado em: {CAMINHO_DRIVER}")
        print("üí• Por favor, baixe o driver correto e atualize a vari√°vel 'CAMINHO_DRIVER' no c√≥digo.")
        return None # Retorna None para indicar falha

    options = Options()
    options.add_argument("--start-maximized")
    #options.add_argument(f"--user-data-dir={USER_DATA_DIR}")
    #options.add_argument(f"--profile-directory={PROFILE_DIR}")

    # Argumentos de estabilidade para previnir crashes na inicializa√ß√£o
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-gpu")

    service = Service(executable_path=CAMINHO_DRIVER)
    
    return webdriver.Chrome(service=service, options=options)

# ... (As outras fun√ß√µes 'fechar_popup_automaticamente' e 'extrair_cidades_pendentes' permanecem as mesmas) ...
def fechar_popup_automaticamente(driver):
    """Tenta fechar o popup de alerta do certificado de forma robusta."""
    print("üßº Tentando fechar o popup de certificado...")
    try:
        wait = WebDriverWait(driver, 10)
        botao_fechar = wait.until(
            EC.element_to_be_clickable((By.XPATH, "//span[@class='btn-fechar' and @onclick='fecharPopupAlertaCertificadoProximoDeExpirar()']"))
        )
        botao_fechar.click()
        print("‚úÖ Popup fechado com sucesso via clique.")
    except Exception:
        print("‚ö° Popup n√£o encontrado ou n√£o clic√°vel. Tentando remover com JavaScript como fallback...")
        try:
            driver.execute_script("""
                var popup = document.getElementById('popupAlertaCertificadoProximoDeExpirar');
                if (popup) { popup.remove(); }
                var modais = document.querySelectorAll('.rich-mpnl');
                modais.forEach(function(el) { el.remove(); });
            """)
            print("üß® Popup removido via JavaScript!")
        except Exception as js_e:
            print(f"üí• Falha ao tentar remover o popup com JavaScript: {js_e}")

def extrair_cidades_pendentes(driver):
    """Clica em 'Pendentes' e extrai a lista de cidades."""
    try:
        print("üü¢ Clicando no menu de pend√™ncias...")
        wait = WebDriverWait(driver, 15)
        pendente_btn = wait.until(
            EC.element_to_be_clickable((By.XPATH, "//span[contains(text(),'Pendentes de ci√™ncia ou de resposta')]"))
        )
        pendente_btn.click()

        print("üü° Esperando a √°rvore de cidades carregar...")
        wait.until(
            EC.presence_of_element_located((By.ID, "formAbaExpediente:listaAgrSitExp:0:trPend"))
        )

        print("üîµ Extraindo os nomes das cidades...")
        spans = driver.find_elements(By.CSS_SELECTOR, "span.nomeTarefa")
        
        cidades = [
            span.text.strip() for span in spans 
            if span.text.strip() and "Pendentes de ci√™ncia" not in span.text
        ]

        print(f"‚úÖ {len(cidades)} cidades encontradas.")
        return cidades
    except Exception as e:
        print(f"‚ùå Erro no scraping: {e}")
        return []


def main():
    """Fun√ß√£o principal para orquestrar a automa√ß√£o."""
    driver = None
    try:
        driver = iniciar_navegador()
        if driver is None:
            # Se a inicializa√ß√£o falhou (driver n√£o encontrado), encerra o script.
            return

        driver.get(PJE_URL)
        print("‚è≥ Aguardando login manual com certificado...")

        WebDriverWait(driver, 180).until(
            EC.presence_of_element_located((By.ID, "formAbaExpediente"))
        )
        print("‚úÖ Login detectado. P√°gina carregada.")

        fechar_popup_automaticamente(driver)
        cidades = extrair_cidades_pendentes(driver)

        print("\nüìä CIDADES COM PEND√äNCIA DE CI√äNCIA:")
        for cidade in cidades:
            print(f"üìç {cidade}")

    except Exception as e:
        print(f"üí• Ocorreu um erro fatal na execu√ß√£o principal: {e}")
    finally:
        if driver:
            print("üö™ Fechando o navegador automaticamente...")
            driver.quit()

if __name__ == "__main__":
    main()